#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SET_WEBSOCKET
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x124ee4040029e59b
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes : []
  procedures :
   -
     name : OnNewConnection
     procedure_id : 1319242446699947419
     type_code : 15
     code : |1-
      procedure OnNewConnection( Client is websocketClient )
      
      // Generates an identifier for the client
      jsClient is JSON
      jsClient.id	= GetUUID()
      
      // Stores the identifier
      Client.Note	= jsClient
      
      // Messages sent can be of any type (string, etc.)
      // Here, define the format of a JSON message: an "event" to indicate the type of event and "data" to transmit data
      jsNotification is JSON
      jsNotification.event	= "connection_established"
      jsNotification.data		= Client.Note
      
      // Transmission
      Client.Send(jsNotification)
     type : 458752
   -
     name : OnIncomingMessage
     internal_properties : CAAAAAgAAADI9V5QUyjS3M9N373keX4ihFYC8hd1CxD6FTX9eeFI5xqVk53WelgTYMLmBcS9SAGnHCLEtab8R57i1JtsWwdBiEr3lzAchYamY0nNkV3tg4qzs729335pBmj4f8Nrdk6HxC/o1IJmm9w2rsnQf7jsvGoHEkvC8QfdRRxT85EyV3qq6Z99A/sLWG0YSFocxJgNqpaqLlbovilgR+duNSXjYT/0l8qLo1gfy07AW1e/ZLcxsaNaMKCWFClAHnicI1M8yaw1+okNySbNwJ/L
     procedure_id : 1319242446700012955
     type_code : 15
     code : |1-
      procedure OnIncomingMessage( Client is websocketClient, jsMessage is JSON )
      
      // Read client details
      jsClient is JSON
      jsClient = Client.Note
      
      // The 'event' member must be specified
      // The client must be registered
      if jsMessage.event..Exist = False _or_ ( jsMessage.event not in ( "ping", "register" ) _and_ jsClient.nom..Exist = False ) then
      	
      	jsNotification is JSON
      	jsNotification.event	= "bad_request"
      	jsNotification.data		= jsMessage
      	
      	// Sends a request error to the client
      	Client.Send(jsNotification)
      	return
      end
      
      switch jsMessage.event
      
      	// Provides the details
      	case "register"
      		
      		jsClient.nom	= jsMessage.data
      		Client.Note		= jsClient
      		
      		jsNotification is JSON
      		jsNotification.event	= "member_added"
      		jsNotification.data		= jsClient
      		
      		// Send this data to other clients
      		WebSocketSendAll( jsNotification )
      		
      	// Request list of clients
      	case "member_list"
      		
      		arrClients	is array of websocketClient	= WebSocketListConnectedClient()
      		sCustomer	is string					= Client.Note
      		
      		jsList		is JSON
      		jsList.event	= "member_list"
      		jsList.data		= []
      		
      		for each ACustomer of arrClients
      			
      			// Ignores the current client
      			if ACustomer..Note = sCustomer then continue
      			
      			// Ignore a client that has not yet registered
      			jsAClient is JSON = ACustomer..Note
      			if jsAClient.nom..Exist = False then continue
      			
      			// Adds valid client
      			Add(jsList.data, ACustomer..Note)
      		end
      		
      		// Returns the list
      		Client.Send(jsList)
      		
      	// Connection maintenance message
      	case "ping"
      		
      		jsPong is JSON
      		jsPong.event = "pong"			
      		Client.Send(jsPong)
      		
      	// Message indicating that the client is typing
      	case "typing"
      		
      		jsNotification is JSON
      		jsNotification.event	= "typing"
      		jsNotification.data		= jsClient
      		
      		// Send this data to other clients
      		WebSocketSendAll( jsNotification )
      		
      	// Message 
      	case "text"
      		
      		jsNotification is JSON
      		jsNotification.event		= "received"
      		jsNotification.data.from	= jsClient
      		jsNotification.data.text	= jsMessage.text
      		
      		// Send this data to other clients
      		WebSocketSendAll( jsNotification )
      		
      end
     type : 458752
   -
     name : OnDisconnection
     procedure_id : 1319242446700078491
     type_code : 15
     code : |1-
      procedure OnDisconnection( Client is websocketClient )
      
      jsClient		is JSON	= Client.Note
      
      jsNotification	is JSON
      jsNotification.event	= "member_removed"
      jsNotification.data		= jsClient
      
      // Send this data to other clients
      WebSocketSendAll( jsNotification, <Except>: [ Client ] )
     type : 458752
   -
     name : WebSocketSendAll
     procedure_id : 1319242446700144027
     type_code : 15
     code : |1-
      procedure WebSocketSendAll( jsMessage is JSON, Except is array of websocketClient = [] )
      
      // List each client 
      Client is websocketClient
      for each Client of WebSocketListConnectedClient()
      	
      	// If one or more clients must be excluded
      	if Except.Count > 0 then			
      		
      		// Checks if the client is part of the list
      		for each OtherClient of Except
      			if OtherClient.Note = Client.Note then
      				
      				// Ignores the client
      				continue(2)					
      			end
      		end
      	end
      	
      	// Ignore a client that has not yet registered
      	jsClient is JSON = Client.Note
      	if jsClient.nom..Exist = False then continue
      	
      	// Sends the notification to the client
      	Client.Send(jsMessage)		
      end
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x1059d5ed0001998f
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
